{"name":"Woocommerce Pesapal Standard Gateway","tagline":"Extends WooCommerce with a Pesapal gateway.","body":"Woocommerce Pesapal Payment Gateway\r\n====================================\r\n\r\nExtends WooCommerce with a Pesapal gateway. Allowing payments via Visa/Mastercard, Bank Transfer, mobile money and the users Pesapl e-wallet.\r\n\r\nBelow is an extensive study of the code powering this gateway :\r\n\r\n`\r\nFirst a familiar plugin header\r\n\r\n\r\n        Plugin Name: WooCommerce Pesapal Standard Gateway\r\n        Plugin URI: http://stormtech.my.phpcloud.com\r\n        Description: Extends WooCommerce with a Pesapal gateway.\r\n        Version: 1.0\r\n        Author: Jonathan Kosgei\r\n        Author URI: http://stormtech.my.phpcloud.com\r\n        Copyright: Â© 2009-2011 Jonathan Kosgei.\r\n        License: GNU General Public License v3.0\r\n        License URI: http://www.gnu.org/licenses/gpl-3.0.html\r\n\r\n\r\nWe load the plugin once all the plugins are loaded and proceed to  check whether Woocommerce is installed as we will be hooking into a number of its Actions and Filters. \r\n\r\n       add_action('plugins_loaded', 'woocommerce_pesapal_standard_init', 0);\r\n \r\nWe initialize the plugin class\r\n\r\nfunction woocommerce_pesapal_standard_init() {\r\n \r\nThe actual check if Woocommerce is installed and loaded\r\n\r\n\tif ( !class_exists( 'WC_Payment_Gateway' ) ) return;\r\n\r\nThe Pesapal API requires constructing URLs with OAuth so as to be able to make the needed GET calls \r\nThis file is an OAuth library provided by Pesapal themselves on their website\r\n \r\n\trequire_once'includes/OAuth.php';\r\n\t/**\r\n \t * Gateway class\r\n \t */\r\n\r\nHere's where the magic begins :)\r\n\r\n\r\n\tclass WC_Pesapal_Standard extends WC_Payment_Gateway {\r\n\r\nThe constructor is a required function according to the Woocommerce docs. Here we set the default basic requried values of the gateway. Please note debug mode is not yet active therefore logging is NOT implemeted for now. However I plan to remedy this soon in a future release.\r\n\r\n\t       public function __construct(){\r\n          $this->id           = 'pesapal_standard';\r\n          $this->method_title = __('Pesapal', 'woocommerce');\r\n          $this->has_fields   = false;\r\n          $this->testmode     = ($this->get_option('testmode') === 'yes') ? true : false;\r\n          $this->debug\t      = $this->get_option( 'debug' );\r\n          $this->log = new WC_Logger();      \r\n          \r\nPesapal provide a demo gateway where developers can test out their implementations and see how it all hold-out.\r\n  \r\n        if($this->testmode){\r\n            $api                    = 'http://demo.pesapal.com/';\r\n            $this->consumer_key     = $this->get_option('testconsumerkey');\r\n            $this->consumer_secret  = $this->get_option('testsecretkey');\r\n          }\r\n          else{\r\n            $api                    = 'https://www.pesapal.com/';\r\n            $this->consumer_key     = $this->get_option('consumerkey');\r\n            $this->consumer_secret  = $this->get_option('secretkey');\r\n          }\r\n          \r\n          $this->consumer                         = new OAuthConsumer($this->consumer_key, $this->consumer_secret);\r\n          $this->signature_method                 = new OAuthSignatureMethod_HMAC_SHA1();\r\n          $this->token = $this->params            = NULL;\r\n          \r\n          // Gateway payment URLs\r\n          $this->post_order                       = $api.'api/PostPesapalDirectOrderV4';\r\n          $this->query_status \t\t  = $api.'API/QueryPaymentStatus';\r\n\t  $this->query_status_by_order_id  = $api.'API/QueryPaymentStatusByMerchantRef';\r\n\t  $this->querypaymentdetails \t\t  = $api.'API/querypaymentdetails';\r\n \r\n          // IPN Request URL\r\n          $this->notify_url   = str_replace( 'https:', 'http:', add_query_arg( 'wc-api', 'WC_Pesapal_Gateway', home_url( '/' ) ) );\r\n \r\n          $this->init_form_fields();\r\n          $this->init_settings();\r\n\r\nHere we provide some settings that will be available to Users via Woocommerce > Settings > Checkout > Pesapal\r\n          \r\n          // Settings\r\n          $this->title = $this->get_option('title');\r\n          $this->description = $this->get_option('description');\r\n          $this->testmode = $this->get_option( 'testmode' );\r\n          $this->debug = $this->get_option( 'debug' );\r\n          $this->consumerkey = $this->get_option('consumerkey');\r\n          $this->secretkey = $this->get_option('secretkey');\r\n          $this->testsecretkey = $this->get_option('testsecretkey');\r\n          $this->testconsumerkey = $this->get_option('testconsumerkey');\r\n \r\n          \r\nThe first action is required to load the plugin and is straight out of the Woocommerce docs.\r\nThe second provides the hook for us to display the Pesapal payment iframe during checkout.\r\nThe third provides a callback for handling the IPN notificaiton response.\r\nThe fourth simply handles the redirect from the Pesapal site after posting of the details.\r\n\r\n          // Actions\r\n          add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( $this, 'process_admin_options' ) );\r\n          add_action('woocommerce_receipt_pesapal', array( $this, 'receipt_page'));\r\n          add_action( 'woocommerce_api_wc_pesapal_gateway', array( $this, 'check_ipn_response' ) );\r\n          add_action('woocommerce_thankyou_pesapal', array( $this, 'pesapal_return_handler'));\r\n \r\n        }//close constructor\r\n \r\n\r\nHere we generate the HTML required for the admin section of the Pesapal Gateway.\r\n\r\n       function init_form_fields() {\r\n          $this->form_fields = array(\r\n            'enabled' => array(\r\n              'title' => __( 'Enable/Disable', 'woothemes' ),\r\n              'type' => 'checkbox',\r\n              'label' => __( 'Enable the Pesapal Gateway', 'woothemes' ),\r\n              'default' => 'no'\r\n            ),\r\n            'title' => array(\r\n              'title' => __( 'Title', 'woothemes' ),\r\n              'type' => 'text',\r\n              'description' => __( 'This controls the title which the user sees during checkout.', 'woothemes' ),\r\n              'default' => __( 'Pesapal Payment', 'woothemes' )\r\n            ),\r\n            'description' => array(\r\n              'title' => __( 'Description', 'woocommerce' ),\r\n              'type' => 'textarea',\r\n              'description' => __( 'This is the description which the user sees during checkout.', 'woocommerce' ),\r\n              'default' => __(\"Pay via Pesapal, using either mobile money, visa/mastercard, bank transfer or your pesapal e-wallet.\", 'woocommerce')\r\n            ),\r\n            'consumerkey' => array(\r\n              'title' => __( 'Pesapal Consumer Key', 'woothemes' ),\r\n              'type' => 'text',\r\n              'description' => __( 'Pesapal consumer key.', 'woothemes' ),\r\n              'default' => ''\r\n            ),\r\n            'secretkey' => array(\r\n              'title' => __( 'Pesapal Secret Key', 'woothemes' ),\r\n              'type' => 'text',\r\n              'description' => __( 'Pesapal secret key.', 'woothemes' ),\r\n              'default' => ''\r\n            ),\r\n            'testmode' => array(\r\n              'title' => __( 'Use Demo Gateway', 'woothemes' ),\r\n              'type' => 'checkbox',\r\n              'label' => __( 'Use Demo Gateway', 'woothemes' ),\r\n              'description' => __( 'Test the Pesapal Gateway.', 'woothemes' ),\r\n              'default' => 'no'\r\n            ),\r\n            'testconsumerkey' => array(\r\n              'title' => __( 'Pesapal Demo Consumer Key', 'woothemes' ),\r\n              'type' => 'text',\r\n              'description' => __( 'Your test Pesapal consumer key, get one at demo.pesapal.com .', 'woothemes' ),\r\n              'default' => ''\r\n            ),\r\n              'testsecretkey' => array(\r\n              'title' => __( 'Pesapal Demo Secret Key', 'woothemes' ),\r\n              'type' => 'text',\r\n              'description' => __( 'Your test Pesapal secret key, get one at demo.pesapal.com .', 'woothemes' ),\r\n              'default' => ''\r\n            ),\r\n            'debug' => array(\r\n\t\t\t'title' => __( 'Debug Log', 'woocommerce' ),\r\n\t\t\t'type' => 'checkbox',\r\n\t\t\t'label' => __( 'Enable logging', 'woocommerce' ),\r\n\t\t\t'default' => 'no',\r\n\t\t\t'description' => sprintf( __( 'Enable logging : <code>woocommerce/logs/pesapal-%s.txt</code>', 'woocommerce' ), sanitize_file_name( wp_hash( 'pesapal' ) ) ),\r\n\t\t    ),\r\n          );\r\n        }//close init_form_fields\r\n\r\nWe then use the admin_options function to put it all together and actually display the HTML \r\n \r\n       public function admin_options() { ?>\r\n        \r\n          <h3><?php _e('Pesapal', 'woocommerce'); ?></h3>\r\n          <p><?php _e('Pesapal works with mobile payment options as well as visa/mastercard and bank transfer.', 'woocommerce');?>\r\n          <?php _e('<strong>Developer: </strong>Jonathan<br />', 'woocommerce'); ?>\r\n          </p>\r\n          <table class=\"form-table\">\r\n          <?php\r\n            // Generate the HTML For the settings form.\r\n            $this->generate_settings_html();\r\n          ?>\r\n          </table>\r\n          <script type=\"text/javascript\">\r\n          jQuery(function(){\r\n            var testMode = jQuery(\"#woocommerce_pesapal_testmode\");\r\n            var consumer = jQuery(\"#woocommerce_pesapal_testconsumerkey\");\r\n            var secret = jQuery(\"#woocommerce_pesapal_testsecretkey\");\r\n            \r\n            if (testMode.is(\":not(:checked)\")){\r\n              consumer.parents(\"tr\").css(\"display\",\"none\");\r\n              secrect.parents(\"tr\").css(\"display\",\"none\");\r\n            }\r\n            \r\n \r\n            // Add onclick handler\r\n            testMode.click(function(){            \r\n              // If checked\r\n              if (testMode.is(\":checked\")) {\r\n                //show the hidden div\r\n                consumer.parents(\"tr\").show(\"fast\");\r\n                secrect.parents(\"tr\").show(\"fast\");\r\n              } else {\r\n                //otherwise, hide it\r\n                consumer.parents(\"tr\").hide(\"fast\");\r\n                secrect.parents(\"tr\").hide(\"fast\");\r\n              }\r\n            });\r\n \r\n          });\r\n          </script>\r\n \r\n          <?php\r\n        } // close admin_options\r\n \r\nWe generate the HTML for the iframe our users will see once our 'receipt_page' hook is called.\r\n \r\n\tfunction generate_pesapal_iframe($order_id){\r\n \r\n\t\t$url = $this->create_url($order_id);\r\n \r\n\t\treturn '<iframe src=\"'.$url.'\" width=\"100%\" height=\"700px\"  scrolling=\"auto\" frameBorder=\"0\">\r\n\t\t\t    <p>Unable to load payment page.</p>\r\n\t\t\t  </iframe>';\r\n\t}\r\n \r\nGenerates the OAuth url\r\n \r\npublic function create_url($order_id){\r\n          $order            = &new WC_Order( $order_id );\r\n          $order_xml        = $this->pesapal_xml($order_id);\r\n          $callback_url     = $this->get_return_url( $order );\r\n          \r\n          \r\n          $url = OAuthRequest::from_consumer_and_token($this->consumer, $this->token, \"GET\", $this->post_order, $this->params);\r\n          $url->set_parameter(\"oauth_callback\", $callback_url);\r\n          $url->set_parameter(\"pesapal_request_data\", $order_xml);\r\n          $url->sign_request($this->signature_method, $this->consumer, $this->token);\r\n          \r\n \r\n          return $url;\r\n        }\r\n \r\n\r\nGenerates XML in the format required for by the Pesapal APi\r\n \r\n         public function pesapal_xml($order_id) {\r\n          \r\n          $order                      = new WC_Order( $order_id );\r\n          $pesapal_args['total']      = $order->get_total();\r\n          $pesapal_args['reference']  = $order_id;\r\n          $pesapal_args['first_name'] = $order->billing_first_name;\r\n          $pesapal_args['last_name']  = $order->billing_last_name;\r\n          $pesapal_args['email']      = $order->billing_email;\r\n          $pesapal_args['phone']      = $order->billing_phone;\r\n          \r\n          $i = 0;\r\n          foreach($order->get_items() as $item){\r\n            $product = $order->get_product_from_item($item);\r\n            \r\n            $cart[$i] = array(\r\n              'id' => ($product->get_sku() ? $product->get_sku() : $product->id),\r\n              'particulars' => $cart_row['name'],\r\n              'quantity' => $item['qty'],\r\n              'unitcost' => $product->regular_price,\r\n              'subtotal' => $order->get_item_total($item, true)\r\n            );\r\n            $i++;\r\n          }\r\n          \r\n          $xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\r\n            <PesapalDirectOrderInfo xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\r\n            Amount=\\\"\" . $pesapal_args['total'] . \"\\\"\r\n            Description=\\\"Order from \" . bloginfo('name') . \".\\\"\r\n            Type=\\\"MERCHANT\\\"\r\n            Reference=\\\"\" . $pesapal_args['reference'] . \"\\\"\r\n            FirstName=\\\"\" . $pesapal_args['first_name'] . \"\\\"\r\n            LastName=\\\"\" . $pesapal_args['last_name'] . \"\\\"\r\n            Email=\\\"\" . $pesapal_args['email'] . \"\\\"\r\n            PhoneNumber=\\\"\" . $pesapal_args['phone'] . \"\\\"\r\n            Currency=\\\"\" . get_woocommerce_currency() . \"\\\"\r\n            xmlns=\\\"http://www.pesapal.com\\\" />\r\n            <lineitems>\";\r\n          foreach($cart as $item){\r\n            $xml .= \"<lineitem\r\n                  uniqueid=\\\"\".$item['id'].\"\\\"\r\n                  particulars=\\\"\".$item['particulars'].\"\\\"\r\n                  quantity=\\\"\".$item['quantity'].\"\\\"\r\n                  unitcost=\\\"\".$item['unitcost'].\"\\\"\r\n                  subtotal=\\\"\".$item['subtotal'].\"\\\"></lineitem>\";\r\n          }\r\n          $xml .= \"</lineitems></pesapaldirectorderinfo>\";\r\n          \r\n          return htmlentities($xml);\r\n        }\r\n \r\nThe actual receipt_page action handler \r\nDisplays the iframe\r\n \r\n\tpublic function receipt_page($order_id){\r\n \r\n\t\techo $this->generate_pesapal_iframe($order_id);\r\n \r\n\t}\r\n \r\n \r\nThe actual handler for the return_handler action hook\r\n\r\n\tpublic function pesapal_return_handler(){\r\n \r\n\t\t$params = stripslashes_deep($_GET);\r\n \r\n\t\t$reference =  $pesapal_tracking_id = NULL;\r\n \r\n\t\tif(isset($params['pesapal_merchant_reference']))\r\n\t\t$reference = $params['pesapal_merchant_reference'];\r\n \r\n\t\tif(isset($params['pesapal_transaction_tracking_id']))\r\n\t\t$pesapal_tracking_id = $params['pesapal_transaction_tracking_id'];\r\n \r\n\t}\r\n \r\nThe actual handler for the IPN notification response. It parses the response and determines if the order has been completed, has failed, is still pending or whether the request was invalid.\r\n\r\n\tpublic function check_ipn_response(){\r\n \r\n\t\tglobal $woocommerce;\r\n \r\n\t\t$params = stripslashes_deep($_GET);\r\n \r\n\t\t$reference =  $pesapal_tracking_id = NULL;\r\n \r\n\t\tif(isset($params['pesapal_notification_type']))\r\n\t\t$reference = $params['pesapal_notification_type'];\r\n \r\n\t\tif(isset($params['pesapal_merchant_reference']))\r\n\t\t$reference = $params['pesapal_merchant_reference'];\r\n \r\n\t\tif(isset($params['pesapal_transaction_tracking_id']))\r\n\t\t$pesapal_tracking_id = $params['pesapal_transaction_tracking_id'];\r\n \r\n\t\t$order = new WC_Order( $reference );\r\n \r\n\t\t$request_status = OAuthRequest::from_consumer_and_token(\r\n\t\t$this->consumer, \r\n\t\t$this->token, \r\n\t\t\"GET\", \r\n\t\t$this->query_status, \r\n\t\t$this->params\r\n\t\t);\r\n\r\n\t\t$request_status->set_parameter(\"pesapal_merchant_reference\", $reference);\r\n\t\t$request_status->set_parameter(\"pesapal_transaction_tracking_id\",$pesapal_tracking_id);\r\n\t\t$request_status->sign_request($this->signature_method, $this->consumer, $this->token);\r\n \r\n\t\t$args = array (\r\n\t\t'sslverify' \t=> false,\r\n\t\t'timeout' \t=> 60,\r\n\t\t'httpversion'   => '1.1',\r\n\t\t'compress'      => false,\r\n\t\t'decompress'    => false,\r\n\t\t'user-agent'\t=> 'WooCommerce/' . WC()->version\r\n\t\t\t\t);\r\n \r\n \r\n\t\t$response = wp_remote_get( $request_status, $args );\r\n \r\n\t\tif ( ! is_wp_error( $response ) && $response['response']['code'] >= 200 && $response['response']['code'] < 300 ) {\r\n \r\n\t\t$this->log->add( 'pesapal', $response );\r\n \r\n\t\t$header_size  = curl_getinfo($response['response']['body'], CURLINFO_HEADER_SIZE);\r\n\t\t\t\t$raw_header   = substr($response['response']['body'], 0, $header_size - 4);\r\n\t\t\t\t$headerArray  = explode(\"\\r\\n\\r\\n\", $raw_header);\r\n\t\t\t\t$header       = $headerArray[count($headerArray) - 1];\r\n\r\n\t\t\t\t//transaction status\r\n\t\t\t\t$elements = preg_split(\"/=/\",substr($response['response']['body'], $header_size));\r\n\t\t\t\t$pesapal_status = $elements[1];\r\n \r\n\t\tswitch ($pesapal_status){\r\n\t\tcase \"COMPLETED\":\r\n\t\t$order->payment_complete();\r\n\t\t$order->reduce_order_stock();\r\n\t\t$woocommerce->cart->empty_cart();\r\n\t\tbreak;\r\n\t\tcase \"FAILED\":\r\n\t\tcase \"INVALID\":\r\n\t\t$order->update_status( 'failed', sprintf( __( 'Payment %s via IPN.', 'woocommerce' ), strtolower( $pesapal_status ) ) );\r\n\t\tbreak;\r\n\t\tcase \"PENDING\":\r\n\t\t$order->update_status( 'on-hold', sprintf( __( 'Payment pending: %s', 'woocommerce' ), 'Waiting for PesaPal confirmation' ) );\r\n\t\tbreak;\r\n\t\tdefault:\r\n\t\t//No action\r\n\t\tbreak;\r\n\t\t}\r\n \r\n\t}\r\n \r\n}//close check_ipn_response\r\n \r\n \r\nA required function - woocommerce docs\r\n\r\n\tpublic function process_payment($order_id){\r\n \r\n\t\t$order = new WC_Order( $order_id );\r\n \r\n\t\treturn array(\r\n\t\t'result' \t=> 'success',\r\n\t\t'redirect'\t=> $order->get_checkout_payment_url( true )\r\n\t\t);\r\n \r\n\t}\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n\t}\r\n\r\n\t/**\r\n \t* Add the Gateway to WooCommerce\r\n \t**/\r\n\r\nWe add the Payment Gateway class to the array of other gateways available to woocommerce with a filter\r\n\r\n\tfunction woocommerce_add_pesapal_standard_gateway($methods) {\r\n\t\t$methods[] = 'WC_Pesapal_Standard';\r\n\t\treturn $methods;\r\n\t}\r\n\r\n\tadd_filter('woocommerce_payment_gateways', 'woocommerce_add_pesapal_standard_gateway' );\r\n} `\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}